import tkinter as tk
from tkinter import ttk, messagebox
import pickle

class Employee:
    def __init__(self, employee_id, position, name, age, date_of_birth, passport_details):
        self.employee_id = employee_id
        self.position = position
        self.name = name
        self.age = age
        self.date_of_birth = date_of_birth
        self.passport_details = passport_details
        self.sales = []

    def calculate_commission(self):
        pass

    def display_employee_details(self):
        return f"ID: {self.employee_id}\nName: {self.name}\nAge: {self.age}\nDOB: {self.date_of_birth}\nPassport: {self.passport_details}\nPosition: {self.position}"

class Salesperson(Employee):
    def __init__(self, employee_id, position, name, age, date_of_birth, passport_details, manager=None):
        super().__init__(employee_id, position, name, age, date_of_birth, passport_details)
        self.manager = manager

    def add_sale(self, car):
        self.sales.append(car)
        self.manager.add_sale(car)

    def display_sales_details(self):
        sales_str = f"Salesperson: {self.name}\nTotal Sales: {len(self.sales)}\nCars Sold:"
        for sale in self.sales:
            sales_str += f"\n- {sale.car_name} ({sale.car_id})"
        return sales_str

    def get_date_of_birth(self):
        return self.date_of_birth.get()

class Manager(Employee):
    def __init__(self, employee_id, position, name, age, date_of_birth, passport_details):
        super().__init__(employee_id, position, name, age, date_of_birth, passport_details)
        self.salespersons = []

    def add_salesperson(self, salesperson):
        self.salespersons.append(salesperson)

    def add_sale(self, car):
        self.sales.append(car)

    def calculate_team_commission(self):
        pass

class Car:
    def __init__(self, car_name, car_id, car_type, base_price, sold_price, fuel_capacity, max_speed, color):
        self.car_name = car_name
        self.car_id = car_id
        self.car_type = car_type
        self.base_price = base_price
        self.sold_price = sold_price
        self.fuel_capacity = fuel_capacity
        self.max_speed = max_speed
        self.color = color

    def display_car_details(self):
        return f"ID: {self.car_id}\nName: {self.car_name}\nType: {self.car_type}\nBase Price: {self.base_price}\nSold Price: {self.sold_price}\nFuel Capacity: {self.fuel_capacity}\nMax Speed: {self.max_speed}\nColor: {self.color}"

class Hatchback(Car):
    def __init__(self, car_name, car_id, car_type, base_price, sold_price, fuel_capacity, max_speed, color, cargo_capacity):
        super().__init__(car_name, car_id, car_type, base_price, sold_price, fuel_capacity, max_speed, color)
        self.cargo_capacity = cargo_capacity

class Sedan(Car):
    def __init__(self, car_name, car_id, car_type, base_price, sold_price, fuel_capacity, max_speed, color):
        super().__init__(car_name, car_id, car_type, base_price, sold_price, fuel_capacity, max_speed, color)


class SUV(Car):
    def __init__(self, car_name, car_id, car_type, base_price, sold_price, fuel_capacity, max_speed, color,
                 amount_of_seats, cargo_capacity):
        super().__init__(car_name, car_id, car_type, base_price, sold_price, fuel_capacity, max_speed, color)
        self.amount_of_seats = amount_of_seats
        self.cargo_capacity = cargo_capacity

class Dealership:
    def __init__(self, name):
        self.name = name
        self.employees = []
        self.cars = []

    def add_employee(self, employee):
        self.employees.append(employee)

    def delete_employee(self, employee_id):
        for employee in self.employees:
            if employee.employee_id == employee_id:
                self.employees.remove(employee)
                return
        raise ValueError("Employee ID not found.")

    def get_employees(self):
        return self.employees

    def modify_employee(self, employee_id, **kwargs):
        for employee in self.employees:
            if employee.employee_id == employee_id:
                for key, value in kwargs.items():
                    setattr(employee, key, value)
                return
        raise ValueError("Employee ID not found.")

    def add_car(self, car):
        self.cars.append(car)

    def delete_car(self, car_id):
        for car in self.cars:
            if car.car_id == car_id:
                self.cars.remove(car)
                return
        raise ValueError("Car ID not found.")

    def modify_car(self, car_id, **kwargs):
        for car in self.cars:
            if car.car_id == car_id:
                for key, value in kwargs.items():
                    setattr(car, key, value)
                return
        raise ValueError("Car ID not found.")

    def find_employee(self, employee_id):
        for employee in self.employees:
            if employee.employee_id == employee_id:
                return employee
        raise ValueError("Employee ID not found.")

    def find_car(self, car_id):
        for car in self.cars:
            if car.car_id == car_id:
                return car
        raise ValueError("Car ID not found.")

    def record_sale(self, employee_id, car_id):
        employee = self.find_employee(employee_id)
        car = self.find_car(car_id)
        if isinstance(employee, Salesperson):
            employee.add_sale(car)
        else:
            raise ValueError("Only salespersons can record sales.")

    def display_employee_details(self, employee_id):
        employee = self.find_employee(employee_id)
        return employee.display_employee_details()

    def display_car_details(self, car_id):
        car = self.find_car(car_id)
        return car.display_car_details()

    def display_employee_sales_details(self, employee_id):
        employee = self.find_employee(employee_id)
        if isinstance(employee, Salesperson):
            return employee.display_sales_details()
        else:
            raise ValueError("Only salespersons have sales details.")

class FileHandler:
    def __init__(self, file_path):
        self.file_path = file_path

    def save_to_file(self, data):
        with open(self.file_path, 'wb') as file:
            pickle.dump(data, file)

    def load_from_file(self):
        try:
            with open(self.file_path, "rb") as file:
                return pickle.load(file)
        except EOFError:
            raise ValueError(f"Error: input file '{self.file_path}' is empty or corrupt")

class DealershipGUI(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.master.title("Dealership Management System")
        self.master.geometry("800x600")
        self.file_handler = FileHandler("data.bin")
        self.create_widgets()
        self.load_data()

    def create_widgets(self):
        # Create labels, entry fields, and buttons for adding and deleting employees and cars
        self.employee_id_label = tk.Label(self, text="Employee ID:")
        self.employee_id_label.grid(row=0, column=0, padx=(10, 5), pady=(10, 5), sticky=tk.W)

        self.employee_id_entry = tk.Entry(self)
        self.employee_id_entry.grid(row=0, column=1, padx=(5, 10), pady=(10, 5), sticky=tk.W)

        self.employee_name_label = tk.Label(self, text="Name:")
        self.employee_name_label.grid(row=1, column=0, padx=(10, 5), pady=(5, 5), sticky=tk.W)

        self.employee_name_entry = tk.Entry(self)
        self.employee_name_entry.grid(row=1, column=1, padx=(5, 10), pady=(5, 5), sticky=tk.W)

        self.employee_age_label = tk.Label(self, text="Age:")
        self.employee_age_label.grid(row=2, column=0, padx=(10, 5), pady=(5, 5), sticky=tk.W)

        self.employee_age_entry = tk.Entry(self)
        self.employee_age_entry.grid(row=2, column=1, padx=(5, 10), pady=(5, 5), sticky=tk.W)

        self.employee_dob_label = tk.Label(self, text="Date of Birth:")
        self.employee_dob_label.grid(row=4, column=0, padx=(10, 5), pady=(5, 5), sticky=tk.W)

        self.employee_dob_entry = tk.Entry(self)
        self.employee_dob_entry.grid(row=4, column=1, padx=(5, 10), pady=(5, 5), sticky=tk.W)

        self.employee_passport_label = tk.Label(self, text="Passport Details:")
        self.employee_passport_label.grid(row=5, column=0, padx=(10, 5), pady=(5, 5), sticky=tk.W)

        self.employee_passport_entry = tk.Entry(self)
        self.employee_passport_entry.grid(row=5, column=1, padx=(5, 10), pady=(5, 5), sticky=tk.W)

        self.employee_position_label = tk.Label(self, text="Position, Case Sensitive (Manager or Salesperson): ")
        self.employee_position_label.grid(row=3, column=0, padx=(10, 5), pady=(5, 5), sticky=tk.W)

        self.employee_position_entry = tk.Entry(self)
        self.employee_position_entry.grid(row=3, column=1, padx=(5, 10), pady=(5, 5), sticky=tk.W)

        self.add_employee_button = tk.Button(self, text="Add Employee", command=self.add_employee)
        self.add_employee_button.grid(row=1, column=2, padx=(10, 10), pady=(10, 5), sticky=tk.W)

        self.delete_employee_button = tk.Button(self, text="Delete Employee", command=self.delete_employee)
        self.delete_employee_button.grid(row=2, column=2, padx=(10, 10), pady=(10, 5), sticky=tk.W)

        self.show_employee_button = tk.Button(self, text="Show Employee", command=self.show_employee_details)
        self.show_employee_button.grid(row=3, column=2, padx=(10, 10), pady=(10, 5), sticky=tk.W)

        # Create a listbox to display the list of employees
        self.employee_listbox_label = tk.Label(self, text="Employee List:")
        self.employee_listbox_label.grid(row=6, column=0, padx=(10, 5), pady=(10, 5), sticky=tk.W)

        self.employee_listbox = tk.Listbox(self)
        self.employee_listbox.grid(row=7, column=0, columnspan=4, padx=(10, 10), pady=(5, 10),
                                   sticky=tk.W + tk.E + tk.N + tk.S)

        # Bind the listbox to a function that displays the details of the selected employee
        self.employee_listbox.bind("<<ListboxSelect>>", self.display_selected_employee_details)

        # Add a scrollbar to the employee listbox
        self.employee_listbox_scrollbar = tk.Scrollbar(self, orient=tk.VERTICAL, command=self.employee_listbox.yview)
        self.employee_listbox_scrollbar.grid(row=6, column=4, pady=(5, 10), sticky=tk.N + tk.S)

        self.employee_listbox.config(yscrollcommand=self.employee_listbox_scrollbar.set)

        # Set the column and row weights to make the listbox expandable
        self.columnconfigure(0, weight=1)
        self.rowconfigure(6, weight=1)

        self.pack(fill=tk.BOTH, expand=1)


    def load_data(self):
        try:
            self.dealership = self.file_handler.load_from_file()
            self.update_employee_listbox()
        except FileNotFoundError:
            self.dealership = Dealership("Asra's Cars")

    def save_data(self):
        self.file_handler.save_to_file(self.dealership)

    # GUI functions to interact with the classes and their methods

    def add_employee(self):
        try:
            employee_id = int(self.employee_id_entry.get())
            name = self.employee_name_entry.get()
            age = int(self.employee_age_entry.get())
            position = self.employee_position_entry.get()
            passport_details = self.employee_passport_entry.get()
            date_of_birth = self.employee_dob_entry.get()

            if position == "Salesperson":
                employee = Salesperson(employee_id, position, name, age, date_of_birth, passport_details)
            elif position == "Manager":
                employee = Manager(employee_id, position, name, age, date_of_birth, passport_details)
            else:
                messagebox.showerror("Error", "Invalid position.")
                return

            self.dealership.add_employee(employee)
            self.update_employee_listbox()
            self.save_data()
            messagebox.showinfo("Success", f"{position} added successfully.")

        except ValueError:
            messagebox.showerror("Error", "Invalid input.")

    def save_employees(self):
        with open('employees.dat', 'wb') as file:
            pickle.dump(self.employees, file)

    def delete_employee(self):
        try:
            index = self.employee_listbox.curselection()[0]
            employee = self.dealership.get_employees()[index]
            self.dealership.delete_employee(employee.employee_id)
            self.update_employee_listbox()
            self.save_data()
            messagebox.showinfo("Success", "Employee deleted successfully.")
        except IndexError:
            messagebox.showerror("Error", "Please select an employee to delete.")
        except ValueError as e:
            messagebox.showerror("Error", str(e))

    def display_selected_employee_details(self, event):
        try:
            index = self.employee_listbox.curselection()[0]
            employee = self.dealership.get_employees()[index]

            self.employee_id_entry.delete(0, tk.END)
            self.employee_id_entry.insert(0, str(employee.employee_id))

            self.employee_name_entry.delete(0, tk.END)
            self.employee_name_entry.insert(0, employee.name)

            self.employee_age_entry.delete(0, tk.END)
            self.employee_age_entry.insert(0, str(employee.age))

            self.employee_position_entry.delete(0, tk.END)
            self.employee_position_entry.insert(0, employee.position)

            self.employee_dob_entry.delete(0, tk.END)
            self.employee_dob_entry.insert(0, str(employee.date_of_birth))

            self.employee_passport_entry.delete(0, tk.END)
            self.employee_passport_entry.insert(0, employee.passport_details)

        except IndexError:
            messagebox.showerror("Error", "Please select an employee.")

    def update_employee_listbox(self):
        self.employee_listbox.delete(0, tk.END)
        for employee in self.dealership.employees:
            self.employee_listbox.insert(tk.END, employee.name)

    def show_employee_details(self):
        try:
            index = self.employee_listbox.curselection()[0]
            employee_id = self.dealership.employees[index].employee_id
            employee_details = self.dealership.display_employee_details(employee_id)
            messagebox.showinfo("Employee Details", employee_details)
        except IndexError:
            messagebox.showerror("Error", "Please select an employee to show details.")



root = tk.Tk()
app = DealershipGUI(master=root)
app.mainloop()
