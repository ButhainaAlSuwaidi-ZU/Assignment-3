
# Import statements
import tkinter as tk
from tkinter import ttk, messagebox
import pickle

# The same employee class with attributes
class Employee:
    def __init__(self, employee_id, position, name, age, date_of_birth, passport_details):
        self.employee_id = employee_id
        self.position = position
        self.name = name
        self.age = age
        self.date_of_birth = date_of_birth
        self.passport_details = passport_details
        self.sales = []

    # Placeholder for commissions.
    def calculate_commission(self):
        pass

    def display_employee_details(self):
        return f"ID: {self.employee_id}\nName: {self.name}\nAge: {self.age}\nDOB: {self.date_of_birth}\nPassport: {self.passport_details}\nPosition: {self.position}"

# Salesperson Class, with inherited information from the Super Class above
class Salesperson(Employee):
    def __init__(self, employee_id, position, name, age, date_of_birth, passport_details, manager=None):
        super().__init__(employee_id, position, name, age, date_of_birth, passport_details)
        self.manager = manager

    # Appending sales from the Salesperson of a car
    def add_sale(self, car):
        self.sales.append(car)
        self.manager.add_sale(car)

# So, we can display the information.
    def display_sales_details(self):
        sales_str = f"Salesperson: {self.name}\nTotal Sales: {len(self.sales)}\nCars Sold:"
        for sale in self.sales:
            sales_str += f"\n- {sale.car_name} ({sale.car_id})"
        return sales_str

    def get_date_of_birth(self):
        return self.date_of_birth.get()

# This is also inherted information.
class Manager(Employee):
    def __init__(self, employee_id, position, name, age, date_of_birth, passport_details):
        super().__init__(employee_id, position, name, age, date_of_birth, passport_details)
        self.salespersons = []

    def add_salesperson(self, salesperson):
        self.salespersons.append(salesperson)

    def add_sale(self, car):
        self.sales.append(car)

    def calculate_team_commission(self):
        pass

 # This is another superclass with many attributes that will be inehrted
class Car:
    def __init__(self, car_name, car_id, car_type, sold_price, fuel_capacity, max_speed, color):
        self.car_name = car_name
        self.car_id = car_id
        self.car_type = car_type
        self.sold_price = sold_price
        self.fuel_capacity = fuel_capacity
        self.max_speed = max_speed
        self.color = color

    def display_car_details(self):
        return f"ID: {self.car_id}\nName: {self.car_name}\nType: {self.car_type}\nSold Price: {self.sold_price}\nFuel Capacity: {self.fuel_capacity}\nMax Speed: {self.max_speed}\nColor: {self.color}"

# Cars inheriting from superclass and adding their own attributes
class Hatchback(Car):
    def __init__(self, car_name, car_id, car_type, sold_price, fuel_capacity, max_speed, color, cargo_capacity):
        super().__init__(car_name, car_id, car_type, sold_price, fuel_capacity, max_speed, color)
        self.cargo_capacity = cargo_capacity

class Sedan(Car):
    def __init__(self, car_name, car_id, car_type, sold_price, fuel_capacity, max_speed, color):
        super().__init__(car_name, car_id, car_type, sold_price, fuel_capacity, max_speed, color)


class SUV(Car):
    def __init__(self, car_name, car_id, car_type, sold_price, fuel_capacity, max_speed, color):
        super().__init__(car_name, car_id, car_type, sold_price, fuel_capacity, max_speed, color)

# Delership class with functions to add, remove amd get employees.
class Dealership:
    def __init__(self, name):
        self.name = name
        self.employees = []
        self.cars = []

    def add_employee(self, employee):
        self.employees.append(employee)

    def delete_employee(self, employee_id):
        for employee in self.employees:
            if employee.employee_id == employee_id:
                self.employees.remove(employee)
                return
        raise ValueError("Employee ID not found.")

    def get_employees(self):
        return self.employees

    def get_cars(self):
        return self.cars

    def modify_employee(self, employee_id, **kwargs):
        for employee in self.employees:
            if employee.employee_id == employee_id:
                for key, value in kwargs.items():
                    setattr(employee, key, value)
                return
        raise ValueError("Employee ID not found.")

# Also we are adding, removing and deleting cars in a similar way.
    def add_car(self, car):
        self.cars.append(car)

    def delete_car(self, car_id):
        for car in self.cars:
            if car.car_id == car_id:
                self.cars.remove(car)
                return
        raise ValueError("Car ID not found.")

    def modify_car(self, car_id, **kwargs):
        for car in self.cars:
            if car.car_id == car_id:
                for key, value in kwargs.items():
                    setattr(car, key, value)
                return
        raise ValueError("Car ID not found.")

    # Finding employees and cars in the same way as the previous code
    def find_employee(self, employee_id):
        for employee in self.employees:
            if employee.employee_id == employee_id:
                return employee
        raise ValueError("Employee ID not found.")

    def find_car(self, car_id):
        for car in self.cars:
            if car.car_id == car_id:
                return car
        raise ValueError("Car ID not found.")

    # recording employee sales
    def record_sale(self, employee_id, car_id):
        employee = self.find_employee(employee_id)
        car = self.find_car(car_id)
        if isinstance(employee, Salesperson):
            employee.add_sale(car)
        else:
            raise ValueError("Only salespersons can record sales.")

        # Displaying employee details
    def display_employee_details(self, employee_id):
        employee = self.find_employee(employee_id)
        return employee.display_employee_details()

    def display_car_details(self, car_id):
        car = self.find_car(car_id)
        return car.display_car_details()

    def display_employee_sales_details(self, employee_id):
        employee = self.find_employee(employee_id)
        if isinstance(employee, Salesperson):
            return employee.display_sales_details()
        else:
            raise ValueError("Only salespersons have sales details.")

# This is to make it easier to pickle all the files with try error messages
# We have it alone so it is cleaner and so that the code is more reusable.
class FileHandler:
    def __init__(self, file_path):
        self.file_path = file_path

    def save_to_file(self, data):
        with open(self.file_path, 'wb') as file:
            pickle.dump(data, file)

    def load_from_file(self):
        try:
            with open(self.file_path, "rb") as file:
                return pickle.load(file)
        except EOFError:
            raise ValueError(f"Error: input file '{self.file_path}' is empty or corrupt")

# The GUI section
class DealershipGUI(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.master.title("Dealership Car Management System")
        self.master.geometry("800x600")
        self.file_handler = FileHandler("Cars.bin")
        self.create_widgets()
        self.load_data()

    # Again, we are using grid because it is the cleanest in this case
    def create_widgets(self):
        # Creating labels, entry fields, and buttons for adding and deleting cars
        # There are all the attributes in the cars just in a GUI format.

        self.car_id_label = tk.Label(self, text="Car ID:")
        self.car_id_label.grid(row=0, column=0, padx=(10, 5), pady=(10, 5), sticky=tk.W)

        self.car_id_entry = tk.Entry(self)
        self.car_id_entry.grid(row=0, column=1, padx=(5, 10), pady=(10, 5), sticky=tk.W)

        self.car_name_label = tk.Label(self, text="Car Name:")
        self.car_name_label.grid(row=1, column=0, padx=(10, 5), pady=(5, 5), sticky=tk.W)

        self.car_name_entry = tk.Entry(self)
        self.car_name_entry.grid(row=1, column=1, padx=(5, 10), pady=(5, 5), sticky=tk.W)

        self.car_type_label = tk.Label(self, text="Car Type (SUV, Sedan, Hatchback):")
        self.car_type_label.grid(row=2, column=0, padx=(10, 5), pady=(5, 5), sticky=tk.W)

        self.car_type_entry = tk.Entry(self)
        self.car_type_entry.grid(row=2, column=1, padx=(5, 10), pady=(5, 5), sticky=tk.W)

        # Add Edit car button
        self.edit_car_button = tk.Button(self, text="Edit Car", command=self.edit_car)
        self.edit_car_button.grid(row=4, column=2, padx=(10, 10), pady=(10, 5), sticky=tk.W)

        self.sold_price_label = tk.Label(self, text="Sold Price:")
        self.sold_price_label.grid(row=4, column=0, padx=(10, 5), pady=(5, 5), sticky=tk.W)

        self.sold_price_entry = tk.Entry(self)
        self.sold_price_entry.grid(row=4, column=1, padx=(5, 10), pady=(5, 5), sticky=tk.W)

        self.fuel_capacity_label = tk.Label(self, text="Fuel Capacity:")
        self.fuel_capacity_label.grid(row=5, column=0, padx=(10, 5), pady=(5, 5), sticky=tk.W)

        self.fuel_capacity_entry = tk.Entry(self)
        self.fuel_capacity_entry.grid(row=5, column=1, padx=(5, 10), pady=(5, 5), sticky=tk.W)

        self.max_speed_label = tk.Label(self, text="Max Speed: ")
        self.max_speed_label.grid(row=3, column=0, padx=(10, 5), pady=(5, 5), sticky=tk.W)

        self.max_speed_entry = tk.Entry(self)
        self.max_speed_entry.grid(row=3, column=1, padx=(5, 10), pady=(5, 5), sticky=tk.W)

        self.color_label = tk.Label(self, text="Car Color: ")
        self.color_label.grid(row=6, column=0, padx=(10, 5), pady=(5, 5), sticky=tk.W)

        self.color_entry = tk.Entry(self)
        self.color_entry.grid(row=6, column=1, padx=(5, 10), pady=(5, 5), sticky=tk.W)

        self.add_car_button = tk.Button(self, text="Add Car", command=self.add_car)
        self.add_car_button.grid(row=1, column=2, padx=(10, 10), pady=(10, 5), sticky=tk.W)

        self.delete_car_button = tk.Button(self, text="Delete Car", command=self.delete_car)
        self.delete_car_button.grid(row=2, column=2, padx=(10, 10), pady=(10, 5), sticky=tk.W)

        self.show_car_button = tk.Button(self, text="Show Car", command=self.display_selected_car_details)
        self.show_car_button.grid(row=3, column=2, padx=(10, 10), pady=(10, 5), sticky=tk.W)

        # Create a listbox to display the list of cars, similar to the employees
        self.car_listbox_label = tk.Label(self, text="Car List:")
        self.car_listbox_label.grid(row=7, column=0, padx=(10, 5), pady=(10, 5), sticky=tk.W)

        self.car_listbox = tk.Listbox(self)
        self.car_listbox.grid(row=8, column=0, columnspan=4, padx=(10, 10), pady=(5, 10),
                                   sticky=tk.W + tk.E + tk.N + tk.S)

        # Bind the listbox to a function that displays the details of the selected cars
        self.car_listbox.bind("<<ListboxSelect>>", self.display_selected_car_details)

        # Add a scrollbar to the car listbox
        self.car_listbox_scrollbar = tk.Scrollbar(self, orient=tk.VERTICAL, command=self.car_listbox.yview)
        self.car_listbox_scrollbar.grid(row=6, column=4, pady=(5, 10), sticky=tk.N + tk.S)

        self.car_listbox.config(yscrollcommand=self.car_listbox_scrollbar.set)

        # Set the column and row weights to make the listbox expandable
        self.columnconfigure(0, weight=1)
        self.rowconfigure(6, weight=1)

        self.pack(fill=tk.BOTH, expand=1)

    # Loading the listbox with our information.
    def load_data(self):
        try:
            self.dealership = self.file_handler.load_from_file()
            self.update_car_listbox()
        except FileNotFoundError:
            self.dealership = Dealership("Asra's Cars")

    # Saving the data using the file handler class
    def save_data(self):
        self.file_handler.save_to_file(self.dealership)

    # GUI functions to interact with the classes and their methods
    # Adding the car and the types of cars with the cars attributes
    def add_car(self):
        try:
            car_id = self.car_id_entry.get()
            name = self.car_name_entry.get()
            sold_price = self.sold_price_entry.get()
            car_type = self.car_type_entry.get()
            fuel_capacity = self.fuel_capacity_entry.get()
            max_speed = self.max_speed_entry.get()
            color = self.color_entry.get()

            # Messages to find what the car type is
            if car_type == "SUV":
                car = SUV(name, car_id, car_type, sold_price, fuel_capacity, max_speed, color)
            elif car_type == "Sedan":
                car = Sedan(name, car_id, car_type, sold_price, fuel_capacity, max_speed, color)
            elif car_type == "Hatchback":
                car = Hatchback(name, car_id, car_type, sold_price, fuel_capacity, max_speed, color)

            else:
                messagebox.showerror("Error", "Invalid position.")
                return

            self.dealership.add_car(car)
            self.update_car_listbox()
            self.save_data()
            messagebox.showinfo("Success", f"{car_type} added successfully.")

        except ValueError:
            messagebox.showerror("Error", "Invalid input.")

    # Saving the cars with pickle
    def save_cars(self):
        with open('employees.dat', 'wb') as file:
            pickle.dump(self.car, file)

    # Deleting the car
    def delete_car(self):
        try:
            index = self.car_listbox.curselection()[0]
            car = self.dealership.get_cars()[index]
            self.dealership.delete_car(car.car_id)
            self.update_car_listbox()
            self.save_data()
            messagebox.showinfo("Success", "Car deleted successfully.")
        except IndexError:
            messagebox.showerror("Error", "Please select Car to delete.")
        except ValueError as e:
            messagebox.showerror("Error", str(e))

    # Editing the car to change information like its ID or name
    def edit_car(self):
        try:
            index = self.car_listbox.curselection()[0]

            car_id = self.car_id_entry.get()
            car_name = self.car_name_entry.get()
            sold_price = self.sold_price_entry.get()
            car_type = self.car_type_entry.get()
            fuel_capacity = self.fuel_capacity_entry.get()
            max_speed = self.max_speed_entry.get()
            color = self.color_entry.get()

            self.dealership.modify_car(
                car_id,
                name=car_name,
                price=sold_price,
                type=car_type,
                fuel_capacity=fuel_capacity,
                max_speed=max_speed,
                color=color
            )

            self.update_car_listbox()
            self.save_data()
            messagebox.showinfo("Success", "Car edited successfully.")

        except IndexError:
            messagebox.showerror("Error", "Please select a Car to edit.")
        except ValueError:
            messagebox.showerror("Error", "Invalid input.")

    # Displaing the cars information by filling in the entry boxes when the car is clicked on from the listbox
    def display_selected_car_details(self, event):
        try:
            index = self.car_listbox.curselection()[0]
            car = self.dealership.get_cars()[index]

            self.car_id_entry.delete(0, tk.END)
            self.car_id_entry.insert(0, car.car_id)

            self.car_name_entry.delete(0, tk.END)
            self.car_name_entry.insert(0, car.car_name)

            self.sold_price_entry.delete(0, tk.END)
            self.sold_price_entry.insert(0, car.sold_price)

            self.car_type_entry.delete(0, tk.END)
            self.car_type_entry.insert(0, car.car_type)

            self.fuel_capacity_entry.delete(0, tk.END)
            self.fuel_capacity_entry.insert(0, car.fuel_capacity)

            self.max_speed_entry.delete(0, tk.END)
            self.max_speed_entry.insert(0, car.max_speed)

            self.color_entry.delete(0, tk.END)
            self.color_entry.insert(0, car.color)

        # Message if no car was selected
        except IndexError:
            messagebox.showerror("Error", "Please select a Car.")

    # Again, we need to update the listbox everytime we do anything as it is the clickable interface
    def update_car_listbox(self):
        self.car_listbox.delete(0, tk.END)
        for car in self.dealership.cars:
            self.car_listbox.insert(tk.END, car.car_name)

    # Showing the car information we gathered and wrote in the listbox.
    def show_car_details(self):
        try:
            index = self.car_listbox.curselection()[0]
            car_id = self.dealership.car[index].car_id
            car_details = self.dealership.display_car_details(car_id)
            messagebox.showinfo("Car Details", car_details)
        except IndexError:
            messagebox.showerror("Error", "Please select a car to show details.")

# Mainloop to use GUI and Tkinter
root = tk.Tk()
app = DealershipGUI(master=root)
app.mainloop()
